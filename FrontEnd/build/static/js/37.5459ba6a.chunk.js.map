{"version":3,"sources":["components/Modal/AssetFilters/CustomerSelection.js","pages/LST/LST.js"],"names":["CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","refresh","setRefresh","useState","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","e","target","value","handleSubmit","a","preventDefault","payload","role","axios","url","API","method","data","response","console","log","useEffect","pickCustomer","_id","customerName","name","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","isOpen","onClose","selectedIndex","onSelect","ind","onSubmit","className","placeholder","onChange","map","i","key","onClick","type","LST","useContext","BottomBarContext","bbaropen","setBBarOpen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","setData","SelectedItems","setSelectedItems","setType","location","setLocation","toLocation","setToLocation","LSTNo","setLSTNo","Date","date","setDate","condition","setCondition","selectedprod","searchtype","searchquery","setSearchQuery","showInvTable","setShowInvTable","messageModal","setMessageModal","modalMessage","setModalMessage","totalResults","setTotalResults","onPageChange","p","thegetter","pages","limit","filters","Emp","getId","out","total","updateInventory","length","invIds","item","push","id","update","lst","from","to","invItems","status","class","disabled","selected","xmlns","viewBox","d","user","sno","invnumber","layout","added","temp","resultsPerPage","label"],"mappings":"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","file":"static/js/37.5459ba6a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\n\nfunction LST() {\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState(0);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(-1);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [SelectedItems, setSelectedItems] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [toLocation, setToLocation] = useState(\"\");\n  const [LSTNo, setLSTNo] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [condition, setCondition] = useState(\"\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  //show table\n  const [showInvTable, setShowInvTable] = useState(false);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n \n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n//   useEffect(() => {\n//     setBBarOpen(1);\n//     return () => {\n//       setBBarOpen(0);\n//       setAssetDetails({});\n//     };\n//   }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"LST\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // setDate(moment(new Date()).format(\"DD/MM/YYYY\"));\n    // Using an IIFE\n    thegetter();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, condition, type, refresh]);\n\n  async function thegetter() {\n    console.log(\"getter called\");\n    let payload = {\n      pages: {\n        page: page,\n        limit: resultsPerPage,\n      },\n      filters: {\n        type: type,\n        location: location,\n        condition: condition,\n        searchtype: searchtype,\n        searchquery: searchquery,\n      },\n    };\n    // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setTotalResults(response.data.total);\n      // const { total, data } = response.data;\n      // console.log(data + \"Now\");\n\n      setData(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  console.log(selectedprod);\n\n  const updateInventory= async ()=>{\n    if(LSTNo==\"\"){\n      setModalMessage(\"LST Number necessary\")\n      setMessageModal(true);\n      return; \n    }\n    if(date==\"\"){\n      setModalMessage(\"Date Necessary\")\n      setMessageModal(true);\n      return; \n    }\n    if(location==\"\"){\n      setModalMessage(\"From location not selected\")\n      setMessageModal(true);\n      return; \n    }\n    if(toLocation==\"\"){\n      setModalMessage(\"To location not selected\")\n      setMessageModal(true);\n      return; \n    }\n    if(SelectedItems.length==0){\n      setModalMessage(\"No items selected\")\n      setMessageModal(true);\n      return;\n    }\n    let invIds=[];\n    SelectedItems.map(async item=>{\n      invIds.push(item._id);\n      const data = {\n        id: item._id,\n        update: {\n          location: \"In Transit\",\n        },\n      };\n      console.log(\"PAYLOAD\", data);\n      try {\n        await axios({\n          url: `${API}/inventory/${Emp.getId()}/invupdate`,\n          method: \"POST\",\n          data: data,\n        });\n        // setIsReviewModalOpen(true);\n        console.log(\"Done\");\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    })\n\n    let lst={\n      from:location,\n      to:toLocation,\n      LSTNo:LSTNo,\n      date:date,\n      invItems:invIds,\n      status:\"In Transit\"\n    }\n    console.log(\"LST\",lst);\n\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: lst,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\")\n      setMessageModal(true);\n      setSelectedItems([])\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n\n  }\n\n\n  const invTable=()=>{\n    return(\n      <div className=\"dark:bg-gray-700 bg-gray-100 px-2 py-2 rounded-lg\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={type}\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Item Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Mouse\">Mouse</option>\n                <option value=\"Keyboard\">Keyboard</option>\n                <option value=\"Monitor\">Monitor</option>\n                <option value=\"Cpu\">Cpu</option>\n                <option value=\"Ram\">Ram</option>\n                <option value=\"Fan\">Fan</option>\n                <option value=\"Motherboard\">Motherboard</option>\n                <option value=\"SMPS\">SMPS</option>\n                <option value=\"HDD\">HDD</option>\n                <option value=\"SMPS\">SMPS</option>\n                <option value=\"GCard\">Gcard</option>\n                <option value=\"EnetCard\">Enet Card</option>\n                <option value=\"SerialCard\">Serial Card</option>\n                <option value=\"ParalellCard\">Paralell Card</option>\n                <option value=\"OpticalDrive\">Optical Drive</option>\n                <option value=\"Others\">Others</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n           \n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Add</TableCell>\n                \n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].kbdname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button layout=\"outline\"  className=\"dark:border-green-700 border-green-400\" onClick={()=>{\n                      let added=false;\n                      SelectedItems.map(i=>{\n                        if(i._id==user._id){\n                          \n                          console.log(i._id,user._id)\n                          setModalMessage(\"Product already Added!\");\n                          setMessageModal(true);\n                          added=true;\n                        }\n                      })\n                      if(added) return;\n                      let temp=[...SelectedItems,user];\n                      setSelectedItems(temp);\n                      setShowInvTable(false);\n                      setModalMessage(\"Product  Added!\");\n                          setMessageModal(true);\n                    }}>Add</Button>\n                  </TableCell>\n\n                  \n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      \n       \n       </div>\n    )\n  }\n\n  const SelectedInv=()=>{\n    return(\n      <>\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n              Selected Items\n            \n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                \n              </tr>\n            </TableHeader>\n            <TableBody>\n              {SelectedItems.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].kbdname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n\n                  \n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter> */}\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      \n    \n       </>\n    )\n  }\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal\n          isOpen={messageModal}\n          onClose={() => setMessageModal(false)}\n        >\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n     \n      <div className=\"mb-64 mt-4\">\n        <div className=\"flex flex-row dark:text-white  \">\n            <div className=\"mr-2 flex flex-row dark:text-white  \">\n                  <div className=\"mx-1 my-1  \">From</div>\n                  {/* -----------------------------------------Location ----------------------- */}\n                  <div class=\"relative mx-1 \">\n                        <select\n                          class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                          value={location}\n                          onChange={(e) => {\n                            setLocation(e.target.value);\n                          }}\n                        >\n                          <option value=\"\" disabled selected>\n                            Location\n                          </option>\n                          {/* <option value=\"\">All</option> */}\n                          <option value=\"Trivandrum\">Trivandrum</option>\n                          <option value=\"Kottayum\">Kottayum</option>\n                          <option value=\"Kozhikode\">Kozhikode</option>\n                        </select>\n\n                              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                                <svg\n                                  class=\"fill-current h-4 w-4\"\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  viewBox=\"0 0 20 20\"\n                                >\n                                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                                </svg>\n                              </div>\n                  </div>\n               </div>\n\n          <div className=\"flex flex-row dark:text-white  \">\n                <div className=\"mx-1 my-1 \" >To</div>\n                {/* -----------------------------------------Location ----------------------- */}\n                <div class=\"relative mx-1 \">\n                      <select\n                        class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                        value={toLocation}\n                        onChange={(e) => {\n                          setToLocation(e.target.value);\n                        }}\n                      >\n                        <option value=\"\" disabled selected>\n                          Location\n                        </option>\n                        {/* <option value=\"\">All</option> */}\n                        <option value=\"Trivandrum\">Trivandrum</option>\n                        <option value=\"Kottayum\">Kottayum</option>\n                        <option value=\"Kozhikode\">Kozhikode</option>\n                      </select>\n\n                      <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                        <svg\n                          class=\"fill-current h-4 w-4\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                        >\n                          <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                        </svg>\n                      </div>\n                    </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n            <div className=\" flex flex-row dark:text-white  \">\n                      <div className=\" mx-3 my-1 \" >LST No.</div>\n                  <div class=\"relative mx-1 \">\n                  <input\n                            value={LSTNo}\n                            onChange={(e) => setLSTNo(e.target.value)}\n                            placeholder=\"LST No.\"\n                            class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                          />\n\n                        \n                      </div>\n            </div>\n            <div className=\"flex flex-row dark:text-white  \">\n              <div className=\" my-2 \" >Date</div>\n                <div class=\"relative mx-1 \">\n                  <input  type=\"date\"\n                        value={date}\n                        onChange={(e) => setDate(e.target.value)}\n                        placeholder=\"LST No.\"\n                        class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                      />\n\n                    \n                  </div>\n            </div>\n            {/* //submitCustomer */}\n            \n            <div className=\"flex flex-row dark:text-white mx-5 \">\n              <Button onClick={updateInventory}>Submit</Button>\n            </div>\n\n\n\n\n      \n      </div>\n      {SelectedInv()}\n      <div className=\"my-5\">\n      <Button    onClick={()=>{\n                      setShowInvTable(true);\n       }}>Add Product from Inventory</Button>\n       </div>\n    {showInvTable?invTable():null}\n      \n      </div>\n\n      \n       {messageModalComponent()}\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default LST;\n"],"sourceRoot":""}