{"version":3,"sources":["components/Modal/AssetFilters/CustomerSelection.js","pages/Notifications/Notifications.js"],"names":["CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","refresh","setRefresh","useState","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","e","target","value","handleSubmit","a","preventDefault","payload","role","axios","url","API","method","data","response","console","log","useEffect","pickCustomer","_id","customerName","name","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","isOpen","onClose","selectedIndex","onSelect","ind","onSubmit","className","placeholder","onChange","map","i","key","onClick","type","Notifications","activerowid","setActiveRowId","useContext","TopBarContext","setTopHeading","topheading","page","setPage","setData","status","location","setLocation","ToLocation","setToLocation","condition","setCondition","selectedprod","searchquery","setSearchQuery","totalResults","setTotalResults","activeRowID","setActiveRowID","messageModal","setMessageModal","modalMessage","setModalMessage","loc","EmpProfile","getLocation","pages","limit","filters","from","to","Emp","getId","out","total","updateInventory","j","items","lstItem","invItem","invItems","update","id","flag","item","updatelst","class","disabled","selected","xmlns","viewBox","d","user","LSTNo","moment","date","format","length","layout","aria-label","size","aria-hidden","num","sno","invnumber","resultsPerPage","label","p"],"mappings":"mRAyBe,SAASA,EAAT,GAWX,IAVFC,EAUC,EAVDA,YACAC,EASC,EATDA,eACAC,EAQC,EARDA,KACAC,EAOC,EAPDA,QACAC,EAMC,EANDA,QACAC,EAKC,EALDA,WACAC,EAIC,EAJDA,SACAC,EAGC,EAHDA,YACAC,EAEC,EAFDA,QACAC,EACC,EADDA,WACC,EACiCC,mBAAS,IAD1C,mBACMC,EADN,KACiBC,EADjB,OAE+BF,mBAAS,IAFxC,mBAEMG,EAFN,KAEgBC,EAFhB,OAGyBJ,mBAAS,IAHlC,mBAGMK,EAHN,KAGaC,EAHb,OAI+BN,mBAAS,GAJxC,mBAIMO,EAJN,KAIgBC,EAJhB,OAK2BR,mBAAS,IALpC,mBAKMS,EALN,KAKcC,EALd,KAQKC,EAAe,SAACC,GACpBF,EAAUE,EAAEC,OAAOC,QAKfC,EAAY,uCAAG,WAAOH,GAAP,iBAAAI,EAAA,6DACnBJ,EAAEK,iBACEC,EAAU,CACZT,OAAQA,EACRU,KAAM,GAJW,kBAOIC,IAAM,CACzBC,IAAI,GAAD,OAAKC,IAAL,uBACHC,OAAQ,OACRC,KAAMN,IAVS,OAObO,EAPa,OAYjBC,QAAQC,IAAIF,EAASD,MACrBtB,EAAauB,EAASD,MAbL,uHAAH,sDAqBlBI,qBAAU,YACR,uCAAC,8BAAAZ,EAAA,6DACKE,EAAU,CACZT,OAAQA,EACRU,KAAM,GAHT,kBAMwBC,IAAM,CACzBC,IAAI,GAAD,OAAKC,IAAL,uBACHC,OAAQ,OACRC,KAAMN,IATX,OAMOO,EANP,OAWGC,QAAQC,IAAIF,EAASD,MACrBtB,EAAauB,EAASD,MAZzB,oHAAD,yDAiBC,IAEH,IAAMK,EAAY,uCAAG,WAAOjC,GAAP,eAAAoB,EAAA,6DAEnBnB,EAAY,CACViC,IAAKlC,EAASkC,IACdC,aAAcnC,EAASoC,OAEzBrC,EAAW,CACTmC,IAAK,GACLG,YAAa,KAEfxC,EAAQ,CACNqC,IAAK,GACLI,SAAU,KAZO,kBAeEC,IAAMC,KAAN,UAAcd,IAAd,sBAAuC,CACxDe,WAAYzC,EAASkC,MAhBN,OAeXQ,EAfW,OAkBjBZ,QAAQC,IAAIW,EAAKd,MAKjBpB,EAAYkC,EAAKd,MAvBA,kDA0BjBE,QAAQC,IAAI,WAAZ,MA1BiB,0DAAH,sDA8BZY,EAAW,uCAAG,WAAO7C,GAAP,eAAAsB,EAAA,6DAClBU,QAAQC,IAAIjC,GACZC,EAAW,CACTmC,IAAKpC,EAAQoC,IACbG,YAAavC,EAAQsC,OAEvBvC,EAAQ,CACNqC,IAAK,GACLI,SAAU,KARM,kBAWAC,IAAMC,KAAN,UAAcd,IAAd,mBAAoC,CAClDkB,UAAW9C,EAAQoC,MAZL,OAWVW,EAXU,OAchBf,QAAQC,IAAIc,EAAEjB,MAKdlB,EAASmC,EAAEjB,MAnBK,kDAsBhBE,QAAQC,IAAI,WAAZ,MAtBgB,0DAAH,sDA0BXe,EAAQ,uCAAG,WAAOlD,GAAP,SAAAwB,EAAA,sDACfU,QAAQC,IAAInC,GACZC,EAAQ,CACNqC,IAAKtC,EAAKsC,IACVI,SAAU1C,EAAK0C,WAJF,2CAAH,sDA4Hd,OACE,oCAIE,kBAAC,QAAD,CAAOS,OAAQrD,EAAasD,QAAS,kBAAMrD,GAAe,KACxD,kBAAC,cAAD,cACS,IACM,GAAZgB,EACC,gDACc,GAAZA,EACF,+CAEA,6CAGJ,kBAAC,YAAD,KACE,kBAAC,IAAD,CAAMsC,cAAetC,EAAUuC,SAAU,SAACC,GAAD,OAASvC,EAAYuC,KAC5D,kBAAC,IAAD,KACE,kBAAC,IAAD,iBACA,kBAAC,IAAD,gBACA,kBAAC,IAAD,cAEF,kBAAC,IAAD,KAzIN,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,kBAKF,4BACE,kBAAC,YAAD,KACE,0BAAMC,SAAUjC,GACd,2BACEkC,UAAU,kNACVC,YAAY,mBACZC,SAAUxC,QAMpB,kBAAC,YAAD,KACGV,EAAUmD,KAAI,SAACxD,EAAUyD,GAAX,OACb,kBAAC,WAAD,CACEC,IAAKD,EACLJ,UAAU,qCACVM,QAAS,kBAAM1B,EAAajC,KAE5B,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGqD,UAAU,iBAAiBrD,EAASoC,eAQrD,kBAAC,cAAD,QAmGI,kBAAC,IAAD,KA5FN,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,kBAMJ,kBAAC,YAAD,KACG7B,EAASiD,KAAI,SAAC1D,EAAS2D,GAAV,OACZ,kBAAC,WAAD,CACEC,IAAKD,EACLJ,UAAU,qCACVM,QAAS,kBAAMhB,EAAY7C,KAE3B,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGuD,UAAU,iBAAiBvD,EAAQsC,eAQpD,kBAAC,cAAD,QAiEI,kBAAC,IAAD,KA1DN,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,eAMJ,kBAAC,YAAD,KACG3B,EAAM+C,KAAI,SAAC5D,EAAM6D,GAAP,OACT,kBAAC,WAAD,CACEC,IAAKD,EACLJ,UAAU,qCACVM,QAAS,kBAAMb,EAASlD,KAExB,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGyD,UAAU,iBAAiBzD,EAAK0C,mBAQjD,kBAAC,cAAD,SAgCE,kBAAC,QAAD,CAAOe,UAAU,eAAeO,KAAK,WAArC,aACa5D,EAASmC,cAEtB,kBAAC,QAAD,CAAOkB,UAAU,eAAeO,KAAK,WAArC,aACa9D,EAAQuC,aAErB,kBAAC,QAAD,CAAOgB,UAAU,eAAeO,KAAK,WAArC,SACShE,EAAK0C,WAGhB,kBAAC,cAAD,KACE,kBAAC,SAAD,CACEe,UAAU,mBAEVM,QAAS,WACPhE,GAAe,GACfQ,GAAYD,KALhB,e,6LCuRK2D,UAziBf,WAAyB,MAIezD,mBAAS,GAJxB,mBAIhB0D,EAJgB,KAIHC,EAJG,OAMeC,qBAAWC,KAA7BC,GANG,EAMfC,WANe,EAMHD,eANG,EAQS9D,oBAAS,GARlB,gCASCA,mBAAS,IATV,mBAShBgE,EATgB,KASVC,EATU,OAUCjE,mBAAS,IAVV,mBAUhBwB,EAVgB,KAUV0C,EAVU,OAaOlE,oBAAS,GAbhB,mBAahBF,EAbgB,KAaPC,EAbO,OAcSC,oBAAS,GAdlB,gCAiBKA,mBAAS,KAjBd,mBAiBhBmE,EAjBgB,aAkBSnE,mBAAS,KAlBlB,mBAkBhBoE,EAlBgB,KAkBNC,EAlBM,OAmBarE,mBAAS,IAnBtB,mBAmBhBsE,EAnBgB,KAmBJC,EAnBI,OAoBWvE,mBAAS,IApBpB,mBAoBhBwE,EApBgB,KAoBLC,EApBK,OAuBiBzE,mBAAS,IAvB1B,mBAuBhB0E,EAvBgB,aA0Ba1E,mBAAS,KA1BtB,iCA2BeA,mBAAS,KA3BxB,qCA4BeA,mBAAS,KA5BxB,qBA4BhB2E,GA5BgB,MA4BHC,GA5BG,SAkCiB5E,mBAAS,IAlC1B,qBAkChB6E,GAlCgB,MAkCFC,GAlCE,SAoCe9E,oBAAU,GApCzB,qBAoChB+E,GApCgB,MAoCHC,GApCG,SAuCkBhF,oBAAS,GAvC3B,qBAuCfiF,GAvCe,MAuCDC,GAvCC,SAwCkBlF,mBAAS,IAxC3B,qBAwCfmF,GAxCe,MAwCDC,GAxCC,MAuDvBxD,qBAAU,WAER,OADAkC,EAAc,iBACP,WACLA,EAAc,OAEf,IAGHlC,qBAAU,WACR,IAAIyD,EAAIC,IAAWC,eAGnB,uCAAC,8BAAAvE,EAAA,6DACCU,QAAQC,IAAI,iBACRT,EAAU,CACZsE,MAAO,CACLxB,KAAMA,EACNyB,MAvCe,IAyCjBC,QAAS,CAEPC,KAAMvB,EACNwB,GAAItB,EACJH,OAAO,aAEPQ,YAAaA,KAIT,OAALU,IAAWnE,EAAQwE,QAAQE,GAAGP,GAjBlC,kBAqBwBjE,IAAM,CACzBC,IAAI,GAAD,OAAKC,IAAL,gBAAgBuE,IAAIC,QAApB,WACHvE,OAAQ,OACRC,KAAMN,IAxBX,OAqBOO,EArBP,OA0BGC,QAAQC,IAAIF,EAASD,KAAKuE,KAC1BjB,GAAgBrD,EAASD,KAAKwE,OAI9B9B,EAAQzC,EAASD,KAAKuE,KA/BzB,uHAAD,yDAqCC,CAAC/B,EAAMI,EAAUE,EAAYE,EAAWL,EAAQrE,IAEnD4B,QAAQC,IAAI+C,GAGZ,IAAMuB,GAAe,uCAAE,WAAO5C,EAAE6C,GAAT,yBAAAlF,EAAA,6DACjBmF,EAAM3E,EACN4E,EAAQ5E,EAAK6B,GACbgD,EAAQD,EAAQE,SAASJ,GAC7BxE,QAAQC,IAAIyE,EAAQC,GAEZE,EAAS,CACbC,GAAIH,EAAQvE,IACZyE,OAAQ,CACNnC,SAAUgC,EAAQR,KAGtBlE,QAAQC,IAAI,UAAW4E,GAZJ,kBAcXnF,IAAM,CACVC,IAAI,GAAD,OAAKC,IAAL,sBAAsBuE,IAAIC,QAA1B,cACHvE,OAAQ,OACRC,KAAM+E,IAjBS,OAmBjBJ,EAAM9C,GAAGiD,SAASJ,GAAG9B,SAASgC,EAAQR,GACtC1B,EAAQiC,GACRnB,IAAgB,GAChBA,GAAe3B,GAEf3B,QAAQC,IAAI,QAxBK,wDA0BjBD,QAAQC,IAAR,MA1BiB,gBA6Bf8E,GAAK,EACTN,EAAM9C,GAAGiD,SAASlD,KAAI,SAAAsD,GACF,cAAfA,EAAKtC,WAAwBqC,GAAK,MAG9B,GAANA,EAlCgB,wBAmCjBrB,GAAgB,GAAD,OAAIiB,EAAQrE,KAAZ,cACfkD,IAAgB,GApCC,kCAuCdyB,EAAY,CACfH,GAAIJ,EAAQtE,IACZyE,OAAQ,CACNpC,OAAQ,aA1CO,oBA8CX/C,IAAM,CACVC,IAAI,GAAD,OAAKC,IAAL,gBAAgBuE,IAAIC,QAApB,WACHvE,OAAQ,OACRC,KAAMmF,IAjDS,QAwDjBvB,GAAgB,GAAD,OAAIiB,EAAQrE,KAAZ,6CACfkD,IAAgB,GAChBxD,QAAQC,IAAI,QA1DK,yDA4DjBD,QAAQC,IAAR,MA5DiB,uEAAF,wDAkMrB,OACE,oCAGE,yBAAKsB,UAAU,cACf,yBAAKA,UAAU,4CAAf,mBAGE,yBAAKA,UAAU,IAEb,yBAAK2D,MAAM,gGAIT,yBAAKA,MAAM,kBACT,4BACEA,MAAM,8LACN9F,MAAOsD,EACPjB,SAAU,SAACvC,GACTyD,EAAYzD,EAAEC,OAAOC,SAGvB,4BAAQA,MAAM,GAAG+F,UAAQ,EAACC,UAAQ,GAAlC,iBAGA,4BAAQhG,MAAM,IAAd,OACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,aAAd,cAGF,yBAAK8F,MAAM,uFACT,yBACEA,MAAM,uBACNG,MAAM,6BACNC,QAAQ,aAER,0BAAMC,EAAE,kFAMY,OAAxB3B,IAAWC,YAAmB,oCAC/B,yBAAKqB,MAAM,kBACV,4BACEA,MAAM,8LACN9F,MAAOwD,EACPnB,SAAU,SAACvC,GACT2D,EAAc3D,EAAEC,OAAOC,SAGzB,4BAAQA,MAAM,GAAG+F,UAAQ,EAACC,UAAQ,GAAlC,eAGA,4BAAQhG,MAAM,IAAd,OACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,aAAd,cAGF,yBAAK8F,MAAM,uFACT,yBACEA,MAAM,uBACNG,MAAM,6BACNC,QAAQ,aAER,0BAAMC,EAAE,mFAIV,KAEJ,yBAAKL,MAAM,kBACT,4BACEA,MAAM,8LACN9F,MAAO0D,EACPrB,SAAU,SAACvC,GACT6D,EAAa7D,EAAEC,OAAOC,SAGxB,4BAAQA,MAAM,GAAG+F,UAAQ,EAACC,UAAQ,GAAlC,aAGA,4BAAQhG,MAAM,IAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,QAGF,yBAAK8F,MAAM,uFACT,yBACEA,MAAM,uBACNG,MAAM,6BACNC,QAAQ,aAER,0BAAMC,EAAE,kFAMd,yBAAKL,MAAM,2BACT,0BAAMA,MAAM,2DACV,yBACEI,QAAQ,YACRJ,MAAM,sCAEN,0BAAMK,EAAE,4HAGZ,0BACEjE,SAAU,SAACpC,GACTA,EAAEK,iBACFlB,GAAYD,KAGd,2BACEgB,MAAO6D,GACPxB,SAAU,SAACvC,GAAD,OAAOgE,GAAehE,EAAEC,OAAOC,QACzCoC,YAAY,oBACZ0D,MAAM,gPAOhB,kBAAC,iBAAD,CAAgB3D,UAAU,QACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,wBAAIA,UAAU,iCACZ,kBAAC,YAAD,eACA,kBAAC,YAAD,aACA,kBAAC,YAAD,WACA,kBAAC,YAAD,aACA,kBAAC,YAAD,YAEA,kBAAC,YAAD,gBACA,kBAAC,YAAD,KAAW,0BAAOA,UAAU,iBAAiBM,QAAS,kBAAIyB,IAAgB,KAA/D,YAGf,kBAAC,YAAD,KACGxD,EAAK4B,KAAI,SAAC8D,EAAM7D,GAAP,OACR,yBAAKJ,UAAU,gCACf,kBAAC,WAAD,CACEA,UAAS,gFACPS,GAAewD,EAAKpF,IAChB,yCACA,QAHG,KAKTwB,IAAKD,EACLE,QAAS,WACPI,EAAeN,KAOjB,kBAAC,YAAD,CAAWJ,UAAU,OACnB,yBAAKA,UAAU,8BAEb,6BACE,uBAAGA,UAAU,iBAAiBiE,EAAKC,UAKzC,kBAAC,YAAD,KACE,0BAAMlE,UAAU,WAAWiE,EAAKvB,OAGlC,kBAAC,YAAD,KACE,0BAAM1C,UAAU,WAAWiE,EAAKtB,KAElC,kBAAC,YAAD,KACE,0BAAM3C,UAAU,WAAhB,IAA4BmE,IAAOF,EAAKG,MAAMC,OAAO,gBAEvD,kBAAC,YAAD,KACE,0BAAMrE,UAAU,WAAWiE,EAAKZ,SAASiB,SAO3C,kBAAC,YAAD,CAAWtE,UAAU,gBACrB,kBAAC,SAAD,CACKuE,OAAO,UACNC,aAAW,WACXlE,QAAS,WACP7B,QAAQC,IAAI,UAGdsB,UAAU,kBAPhB,aAYA,kBAAC,YAAD,CAAWA,UAAU,gBACrB,kBAAC,SAAD,CAEMyE,KAAK,OACLD,aAAW,WACXlE,QAAS,WACP7B,QAAQC,IAAI+B,GAMTsB,GAAe3B,IAKpBJ,UAAU,kBAEV,kBAAC,eAAD,CAAcA,UAAU,UAAU0E,cAAY,YAQpD5C,IAAa1B,GAjWf8C,EAiW4Be,EAAKZ,SAjW3BsB,EAiWoCvE,EA9VtD,yBAAKJ,UAAU,qCAGb,yBAAKA,UAAU,YAGb,kBAAC,iBAAD,CAAgBA,UAAU,QACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACA,kBAAC,YAAD,aACE,kBAAC,YAAD,aACA,kBAAC,YAAD,sBACA,kBAAC,YAAD,iBACA,kBAAC,YAAD,mBACA,kBAAC,YAAD,kBACA,kBAAC,YAAD,kBAIJ,kBAAC,YAAD,KACGkD,EAAM/C,KAAI,SAAC8D,EAAM7D,GAAP,OACT,kBAAC,WAAD,CACEJ,UAAS,iDACPS,GAAewD,EAAKpF,IAChB,yCACA,QAHG,KAKTwB,IAAKD,EACLE,QAAS,WACPI,EAAeuD,EAAKpF,OAOrB,kBAAC,YAAD,CAAWmB,UAAU,OACpB,yBAAKA,UAAU,8BAMb,6BACE,uBAAGA,UAAU,iBAAiBiE,EAAK1D,SAOzC,kBAAC,YAAD,KACE,0BAAMP,UAAU,WAAWiE,EAAKlF,OAGlC,kBAAC,YAAD,KACE,0BAAMiB,UAAU,WAAWiE,EAAKW,MAElC,kBAAC,YAAD,KACE,0BAAM5E,UAAU,WAAWiE,EAAK9C,WAElC,kBAAC,YAAD,KACE,0BAAMnB,UAAU,WAAWiE,EAAKY,YAElC,kBAAC,YAAD,KACE,kBAAC,QAAD,CACEtE,KAAwB,QAAlB0D,EAAK1C,UAAsB,UAAY,UAE5C0C,EAAK1C,YAGV,kBAAC,YAAD,KACE,kBAAC,SAAD,CAAQgD,OAAO,UAAWvE,UAAU,yCAAyCM,QAAS,WAClE,cAAf2D,EAAK9C,SACN6B,GAAgB2B,EAAIvE,IAElB+B,GAAgB,oBAChBF,IAAgB,MAEH,cAAfgC,EAAK9C,SAAuB,+CAAa,4DA8QJ,MAjW9C,IAAC+B,EAAMyB,OAsWZ,kBAAC,cAAD,KACE,kBAAC,aAAD,CACE/C,aAAcA,GACdkD,eAxfW,GAyfXC,MAAM,mBACN7E,SAhfZ,SAAsB8E,GACpBhE,EAAQgE,SA6OR,oCACE,kBAAC,QAAD,CACEtF,OAAQsC,GACRrC,QAAS,kBAAMsC,IAAgB,KAE/B,kBAAC,cAAD,KAAcC,IACd,kBAAC,YAAD,MACA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACElC,UAAU,mBACVM,QAAS,kBAAM2B,IAAgB,KAFjC,e","file":"static/js/18.52a837e3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { Page, Text, View, Document, StyleSheet,PDFDownloadLink } from '@react-pdf/renderer';\nimport ReactPDF from '@react-pdf/renderer';\nimport { PDFViewer } from '@react-pdf/renderer';\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon,DropdownIcon } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\n// import PrintLST from \"./PrintLST\";\n\nfunction Notifications() {\n  \n\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n \n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [status, setstatus] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [ToLocation, setToLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  const [activeRowID, setActiveRowID] = useState(-1);\n\n   //modal\n   const [messageModal, setMessageModal] = useState(false);\n   const [modalMessage, setModalMessage] = useState(\"\")\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n \n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Notifications\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    let loc=EmpProfile.getLocation();\n    // console.log(\"Location\",loc);\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          // type: type,\n          from: location,\n          to: ToLocation,\n          status:\"In Transit\",\n          // searchtype: searchtype,\n          searchquery: searchquery,\n        },\n        \n      };\n      if(loc!=\"All\")payload.filters.to=loc\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/lst/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, ToLocation ,condition, status, refresh]);\n\n  console.log(selectedprod);\n\n\n  const updateInventory= async (i,j)=>{\n    let items=data;\n    let lstItem=data[i];\n    let invItem=lstItem.invItems[j];\n    console.log(lstItem,invItem);\n\n      const update = {\n        id: invItem._id,\n        update: {\n          location: lstItem.to,\n        },\n      };\n      console.log(\"PAYLOAD\", update);\n      try {\n        await axios({\n          url: `${API}/inventory/${Emp.getId()}/invupdate`,\n          method: \"POST\",\n          data: update,\n        });\n        items[i].invItems[j].location=lstItem.to;\n        setData(items);\n        setActiveRowID(-1);\n        setActiveRowID(i);\n        // setIsReviewModalOpen(true);\n        console.log(\"Done\");\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n      let flag=false;\n      items[i].invItems.map(item=>{\n        if(item.location==\"In Transit\") flag=true;\n      })\n    \n      if(flag==true){\n        setModalMessage(`${invItem.name} Recieved`)\n        setMessageModal(true); \n        return;\n      }\n     const updatelst = {\n        id: lstItem._id,\n        update: {\n          status: \"Received\",\n        },\n      };\n      try {\n        await axios({\n          url: `${API}/lst/${Emp.getId()}/update`,\n          method: \"POST\",\n          data: updatelst,\n        });\n        // items[i].invItems[j].location=lstItem.to;\n        // setData(items);\n        // setActiveRowID(-1);\n        // setActiveRowID(i);\n        // setIsReviewModalOpen(true);\n        setModalMessage(`${invItem.name} Recieved.\\n All Items Received from LST`)\n        setMessageModal(true); \n        console.log(\"Done\");\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n\n    \n  }\n\nconst InvTable=(items,num)=>{\n  \n  return (\n    <div className=\" bg-gray-200 dark:bg-gray-700 p-3\">\n      \n      \n      <div className=\"mb- mt-4\">\n        \n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n              <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Recieve</TableCell>\n\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {items.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(user._id);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].kbdname);\n                  }}\n                >\n                   <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button layout=\"outline\"  className=\"dark:border-green-700 border-green-400\" onClick={()=>{\n                      if(user.location==\"In Transit\")\n                        updateInventory(num,i);\n                        else{\n                          setModalMessage(\"Already Recieved\")\n                          setMessageModal(true);\n                        }\n                    }}>{user.location==\"In Transit\"?<>Receive</>:<>Received</>}</Button>\n                  </TableCell>\n\n                 \n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          \n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </div>\n  );\n \n}\n\nconst messageModalComponent = () => {\n  return (\n    <>\n      <Modal\n        isOpen={messageModal}\n        onClose={() => setMessageModal(false)}\n      >\n        <ModalHeader>{modalMessage}</ModalHeader>\n        <ModalBody></ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            onClick={() => setMessageModal(false)}\n          >\n            Okay!\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n\n\n\n  return (\n    <>\n      \n\n      <div className=\"mb-64 mt-4\">\n      <div className=\" font-bold text-xl mt-10 dark:text-white\">LSTs In Transit</div>\n\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            \n           \n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  From Location\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayum\">Kottayum</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n            \n             {/* -----------------------------------------Location ----------------------- */}\n             {EmpProfile.getLocation==\"All\"?<>\n             <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={ToLocation}\n                onChange={(e) => {\n                  setToLocation(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  To Location\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayum\">Kottayum</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n            </>:null}\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search LST Number\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr className=\"flex flex-row justify-between\">\n                <TableCell>LST.No</TableCell>\n                <TableCell>From</TableCell>\n                <TableCell>To</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>No.</TableCell>\n                {/* <TableCell>Status</TableCell> */}\n                <TableCell> Report</TableCell>\n                <TableCell><span  className=\"cursor-pointer\" onClick={()=>setActiveRowID(-1)}>Items</span></TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <div className=\"flex flex-col justify-around\">\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 flex flex-row justify-between  ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].kbdname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      \n                      <div>\n                        <p className=\"font-semibold\">{user.LSTNo}</p>\n                       \n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.from}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.to}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\"> {moment(user.date).format(\"DD/MM/YYYY\")}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invItems.length}</span>\n                  </TableCell>\n                  {/* <TableCell>\n                    <Badge>\n                      condition\n                    </Badge>\n                  </TableCell> */}\n                  <TableCell className=\"text-center \">\n                  <Button\n                       layout=\"outline\" \n                        aria-label=\"DropDown\"\n                        onClick={()=>{\n                          console.log(\"dwlod\")\n                          \n                        }}\n                        className=\"rounded-lg m-1\"\n                      >\n                       Download\n                      </Button>\n                  </TableCell>\n                  <TableCell className=\"text-center \">\n                  <Button\n                        // layout=\"link\"\n                        size=\"icon\"\n                        aria-label=\"DropDown\"\n                        onClick={()=>{\n                          console.log(activerowid)\n                            // if(activerowid==i){\n                              \n                              // setActiveRowID(-1);\n                            // }\n                            // else\n                             setActiveRowID(i);\n\n\n                    \n                          }}\n                        className=\"rounded-lg m-1\"\n                      >\n                        <DropdownIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                      </Button>\n                  </TableCell>\n\n                 \n                </TableRow>\n\n\n                {(activeRowID==i) ?InvTable(user.invItems,i):null}\n                </div>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n     \n            {messageModalComponent()}\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default Notifications;\n"],"sourceRoot":""}